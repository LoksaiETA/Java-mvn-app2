1. Setup an AWS EC2 Instance
The first step would be for us to set up an EC2 instance and on this instance, we will be installing -
1.	JDK
2.	Jenkins
3.	eksctl
4.	kubectl


1.1 Launch EC2 instance
1.	But first let's head over to AWS and in the search box type in ec2.
 AWS EC2 setup
2.	Click on the EC2 and after that, you need to look for the Launch Insance option -
 AWS EC2 Launch Instance
3.	Now select the image type for the EC2 instance(For this article we are going to select Ubuntu Server 20.04)
 AWS EC2 Launch Instance
4.	Choose an Instance Type.
For this tutorial, we are going to use t2.medium because we will be installing Jenkins and t2.micro will not be sufficient enough to setup Jenkins
 AWS EC2 Choose instance type
5.	Configure Instance Details - you can simply verify the detail and proceed to add the storage part.
 AWS EC2 configure instance details
6.	Add storage - In general 8 Gib of memory is sufficient enough for setting up Jenkins
 AWS EC2 add storage
7.	Add tags - This part is optional but you can add some meaningful tag names to your EC2 instance.
 AWS EC2 add tags
8.	Configure Security group - This is an important step because here we need to add Custom TCP Port 8080, if you do not add this port then you will not be able to access Jenkins using the public IP address of the AWS EC2 instance.
 AWS EC2 add security group
9.	Finally click on review and launch
 AWS EC2 review and launch
10.	But before you launch your EC2 instance you need to create and download the key pair (private key and public key)
 AWS EC2 create a new key pair
11.	Type in the key pair name and then click on the Download Key Pair.
 AWS EC2 create a new key pair and download key
Your ec2 instance should be up and running.

2. Connect to EC2 Instance
Before you connect to your EC2 instance you must start your EC2 instance.
Goto your AWS EC2 dashboard and click on EC2 after that click on Instances(running).
Remove the running filter and you should see your EC2 instance which you set up in Step 1.
 Connect AWS EC2
Now we need to start the EC2 instance and it can be done by first selecting the instance and then
Goto-> Instance Start -> Start Instance
 Connect AWS EC2
Once the instance state is Running you can select the instance and click on Connect
 Connect AWS EC2
We will connect using SSH Client -
 AWS EC2 Connect to instance SSH Client
We will use the jenkins-ec2.pem file to connect, so carefully copy the ssh command. (Following command will be different for you because the IP address of EC2 instance will always be different for you and also you need to supply your server pem file)
ssh -i "my-key-pair-1.pem" ubuntu@ec2-18-185-59-154.eu-central-1.compute.amazonaws.com
After successful login, you should see something similar on your terminal -
 SSH into AWS ec2 instance using pem file


3. Install JDK on AWS EC2 Instance
The next requirement is we need to install JAVA(JDK) on the EC2 instance.
In the previous step we have seen how to connect and ssh into the EC2 instance.
Now before we do the JDK installation lets first update the package manager of the virtual machine -
sudo apt-get update  
Check if you have java already installed onto your EC2 machine by running the following command -
java -version 
In case if you do not have java installed then you will see the following message -
Command 'java' not found, but can be installed with:

sudo apt install openjdk-11-jre-headless  # version 11.0.11+9-0ubuntu2~20.04, or
sudo apt install default-jre              # version 2:1.11-72
sudo apt install openjdk-13-jre-headless  # version 13.0.7+5-0ubuntu1~20.04
sudo apt install openjdk-16-jre-headless  # version 16.0.1+9-1~20.04
sudo apt install openjdk-8-jre-headless   # version 8u292-b10-0ubuntu1~20.04
sudo apt install openjdk-14-jre-headless  # version 14.0.2+12-1~20.04 
BASH
But you can install java by running the following command
sudo apt install openjdk-11-jre-headless
BASH
If you see the following message then you have installed java successfully -
openjdk version "11.0.11" 2021-04-20
OpenJDK Runtime Environment (build 11.0.11+9-Ubuntu-0ubuntu2.20.04)
OpenJDK 64-Bit Server VM (build 11.0.11+9-Ubuntu-0ubuntu2.20.04, mixed mode, sharing) 
BASH


4. Install and Setup Jenkins
The next step would be to install the Jenkins. You can follow the official Jenkins Installation guide also. But here I have listed down the steps for installing the Jenkins on the EC2 instance.
First, we need to add the Jenkins repository to the package manager -

wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -
sudo sh -c 'echo deb https://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list' 
 
After adding the repository link of Jenkins update the package manager
sudo apt-get update 
Then finally install Jenkins using the following command
sudo apt-get install jenkins
BASH

On successful installation, you should see Active Status
sudo service jenkins status 
● jenkins.service - LSB: Start Jenkins at boot time
     Loaded: loaded (/etc/init.d/jenkins; generated)
     Active: active (exited) since Tue 2021-06-22 20:31:18 UTC; 37s ago
       Docs: man:systemd-sysv-generator(8)
    Process: 16297 ExecStart=/etc/init.d/jenkins start (code=exited, status=0/SUCCESS)
BASH


4.1 Setup jenkins
After installing jenkins lets go back to AWS dashboard -> EC2 -> Instances(running)
 AWS EC2 click on instance ID for public IP address
Click on the instance ID as mentioned in the above image.
Now we need to find the public IP address of the EC2 machine so that we can access the Jenkins.
Once you click on the instance ID you should see the following page with lots of information about the EC2 instance.
We need to look for Public IPv4 address
 AWS EC2 click on instance ID for public IP address
Alright now we know the public IP address of the EC2 machine, so now we can access the Jenkins from the browser using the public IP address followed by the port 8080
 Jenkins access url after installing
If you are installing the Jenkins for the first time then you need to supply the initialAdminPassword and you can obtain it from -
sudo cat /var/lib/jenkins/secrets/initialAdminPassword
Copy the password and paste it into the initial page of the Jenkins. After that, Jenkins will prompt you for installing the plugins.
Opt for install suggested plugin -
 Jenkins install suggested plugins
After completing the installation of the suggested plugin you need to set the First Admin User for Jenkins
 Jenkins set first admin user
Also, check the instance configuration because it will be used for accessing the Jenkins
 jenkins instance configuration
And now your Jenkins is ready for use
 Jenkins is ready for use


4.2 Setup Gradle
In this lab session, we will be using the Spring Boot Application, so we need to use a build tool for compilation and building the JAR file and for that, we will be using Gradle as the preferred tool.
For setting up the gradle Goto -> Manage Jenkins -> Global Tool Configuration -> Gradle
Here is the screenshot for your reference -
 Setup gradle as preferred build


5. Update visudo and assign administration privileges to jenkins user
Now we have installed the Jenkins on the EC2 instance. To interact with the Kubernetes cluster Jenkins will be executing the shell script with the Jenkins user, so the Jenkins user should have an administration(superuser) role assigned forehand.
Let's add jenkins user as an administrator and also ass NOPASSWD so that during the pipeline run it will not ask for root password.
Open the file /etc/sudoers in vi mode
sudo vi /etc/sudoers 
BASH
Add the following line at the end of the file
jenkins ALL=(ALL) NOPASSWD: ALL 
BASH
After adding the line save and quit the file.
Now we can use Jenkins as root user and for that run the following command -
sudo su - jenkins  
BASH


6. Install Docker
Now we need to install the docker after installing the Jenkins.
The docker installation will be done by the Jenkins user because now it has root user privileges.
Use the following command for installing the docker -
sudo apt install docker.io
BASH
After installing the docker you can verify it by simply typing the docker --version onto the terminal
It should return you with the latest version of the docker
Docker version 20.10.2, build 20.10.2-0ubuntu1~20.04.2
BASH


6.1 Add jenkins user to Docker group
Jenkins will be accessing the Docker for building the application Docker images, so we need to add the Jenkins user to the docker group.
sudo usermod -aG docker jenkins 


7. Install and Setup AWS CLI
Okay so now we have our EC2 machine and Jenkins installed. Now we need to set up the AWS CLI on the EC2 machine so that we can use eksctl in the later stages
Let us get the installation done for AWS CLI
sudo apt install awscli 
BASH
Verify your AWS CLI installation by running the following command -
aws --version 
It should return you with the version of CLI
aws-cli/1.18.69 Python/3.8.5 Linux/5.4.0-1045-aws botocore/1.16.19 


7.1 Configure AWS CLI
Okay now after installing the AWS CLI, let's configure the AWS CLI so that it can authenticate and communicate with the AWS environment.
To configure the AWS the first command we are going to run is -
aws configure 
Once you execute the above command it will ask for the following information -
1.	AWS Access Key ID [None]:
2.	AWS Secret Access Key [None]:
3.	Default region name [None]:
4.	Default output format [None]:
You can find this information by going into AWS -> My Security Credentials
 AWS EC2 my security credentials for AWS CLI
Then navigate to Access Keys (access key ID and secret access key)
 AWS EC2 access keys for setting up AWS CLI
You can click on the Create New Access Key and it will let you generate - AWS Access Key ID, AWS Secret Access Key.
 AWS EC2 download access key id and secret access key for aws configure
(Note: - Always remember you can only download your access id and secret once, if you misplace the secret and access then you need to recreate the keys again)
Default region name - You can find it from the menu
 AWS EC2 region for AWS CLI Default region name
Alright now we have installed and set up AWS CLI.


8. Install and Setup Kubectl
Moving forward now we need to set up the kubectl also onto the EC2 instance where we set up the Jenkins in the previous steps.
Here is the command for installing kubectl
curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
chmod +x ./kubectl 
sudo mv ./kubectl /usr/local/bin
BASH


Verify the kubectl installation
Verify the kubectl installation by running the command kubectl version and you should see the following output
Client Version: version.Info{Major:"1", Minor:"21", GitVersion:"v1.21.2", GitCommit:"092fbfbf53427de67cac1e9fa54aaa09a28371d7", GitTreeState:"clean", BuildDate:"2021-06-16T12:59:11Z", GoVersion:"go1.16.5", Compiler:"gc", Platform:"linux/amd64"}
Error from server (Forbidden): <html><head><meta http-equiv='refresh' content='1;url=/login?from=%2Fversion%3Ftimeout%3D32s'/><script>window.location.replace('/login?from=%2Fversion%3Ftimeout%3D32s');</script></head><body style='background-color:white; color:white;'> 


9. Install and Setup eksctl
The next thing which we are gonna do is to install the eksctl, which we will be using to create AWS EKS Clusters.
Okay, the first command which we are gonna run to install the eksctl
 curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
BASH
sudo mv /tmp/eksctl /usr/local/bin 
BASH
Verify the installation by running the command -
eksctl version
BASH
And it will return you with the version -
0.52.0 
BASH
So at the time of installation, I had 0.52.0
 eksctl version after installation
Installing eksctl on other OS
For Mac OS
brew tap weaveworks/tap
brew install weaveworks/tap/eksctl
For Windows
 chocolatey install eksctl
BASH
or Scoop
 scoop install eksctl
BASH
